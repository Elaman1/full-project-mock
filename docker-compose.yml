services:
  db:
    image: postgres:16
    container_name: my-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Aa1234
      POSTGRES_DB: userdb
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./docker/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7
    container_name: my-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  migrate:
    image: migrate/migrate
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    entrypoint:
      [ "migrate", "-path=/migrations", "-database=postgres://postgres:Aa1234@db:5432/userdb?sslmode=disable", "up" ]

  migrate-test:
    image: migrate/migrate
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    entrypoint:
      [ "migrate", "-path=/migrations", "-database=postgres://postgres:Aa1234@db:5432/testdb?sslmode=disable", "up" ]

  app:
    build: .
    image: full-project-mock
    container_name: full-project-mock
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
#    restart: unless-stopped # По необходимости
    command: [ "./full-project-mock"]
    volumes:
      - ../secrets:/app/secrets:ro

volumes:
  db-data:
  redis-data: